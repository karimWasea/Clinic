// <auto-generated />
using System;
using Clincic.DataAccesslayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic.DataAccesslayer.Migrations
{
    [DbContext(typeof(ApplicationDBcontext))]
    [Migration("20240124225655_initi4")]
    partial class initi4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Clincic.DataAccesslayer.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("clinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isOpen")
                        .HasColumnType("bit");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numberOfDoctors")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contractpath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Imgpath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.DoctorSHifts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<Guid>("DoctorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SHiftsId")
                        .HasColumnType("int");

                    b.Property<Guid>("SHiftsId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisitsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("SHiftsId1");

                    b.HasIndex("VisitsId");

                    b.ToTable("DoctorSHifts");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contractpath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Imgpath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.SHifts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndShift")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartShift")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SHifts");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Visits", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visisttype")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitsApientment")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Doctor", b =>
                {
                    b.HasOne("Clincic.DataAccesslayer.Clinic", null)
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.DoctorSHifts", b =>
                {
                    b.HasOne("Clincic.DataAccesslayer.Doctor", "Doctor")
                        .WithMany("DoctorSHifts")
                        .HasForeignKey("DoctorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clincic.DataAccesslayer.SHifts", "SHifts")
                        .WithMany("DoctorShifts")
                        .HasForeignKey("SHiftsId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clincic.DataAccesslayer.Visits", null)
                        .WithMany("DoctorShifts")
                        .HasForeignKey("VisitsId");

                    b.Navigation("Doctor");

                    b.Navigation("SHifts");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Employee", b =>
                {
                    b.HasOne("Clincic.DataAccesslayer.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Patient", b =>
                {
                    b.HasOne("Clincic.DataAccesslayer.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Visits", b =>
                {
                    b.HasOne("Clincic.DataAccesslayer.Doctor", null)
                        .WithMany("Visits")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Clincic.DataAccesslayer.Patient", null)
                        .WithMany("Visits")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Clinic", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Doctor", b =>
                {
                    b.Navigation("DoctorSHifts");

                    b.Navigation("Patients");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Patient", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.SHifts", b =>
                {
                    b.Navigation("DoctorShifts");
                });

            modelBuilder.Entity("Clincic.DataAccesslayer.Visits", b =>
                {
                    b.Navigation("DoctorShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
